type Account implements Node {
  """The ID of an object"""
  id: ID!
  extid: String!
  name: String
  email: String
  user: User
}

input CreateProjectInput {
  name: String!
  clientMutationId: String
}

type CreateProjectPayload {
  viewer: Viewer!
  project: Project
  errors: String
  clientMutationId: String
}

input LoginWithTokenInput {
  auth_token: String!
  clientMutationId: String
}

type LoginWithTokenPayload {
  viewer: Viewer!
  errors: String
  clientMutationId: String
}

input LogoutInput {
  clientMutationId: String
}

type LogoutPayload {
  viewer: Viewer!
  clientMutationId: String
}

type Mutation {
  createProject(input: CreateProjectInput!): CreateProjectPayload
  loginWithToken(input: LoginWithTokenInput!): LoginWithTokenPayload
  logout(input: LogoutInput!): LogoutPayload
  requestCode(input: RequestCodeInput!): RequestCodePayload
  requestToken(input: RequestTokenInput!): RequestTokenPayload
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Project implements Node {
  """The ID of an object"""
  id: ID!
  name: String
}

"""A connection to a list of items."""
type ProjectConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProjectEdge]
  totalCount: Int!
}

"""An edge in a connection."""
type ProjectEdge {
  """The item at the end of the edge"""
  node: Project

  """A cursor for use in pagination"""
  cursor: String!
}

type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
  viewer: Viewer!
}

input RequestCodeInput {
  email: String
  clientMutationId: String
}

type RequestCodePayload {
  code_token: String
  errors: String
  clientMutationId: String
}

input RequestTokenInput {
  code_token: String
  code: String
  clientMutationId: String
}

type RequestTokenPayload {
  auth_token: String
  errors: String
  clientMutationId: String
}

type User implements Node {
  """The ID of an object"""
  id: ID!
  name: String
  about: String
  username: String
}

type Viewer implements Node {
  """The ID of an object"""
  id: ID!
  me: Account
  name: String
  email: String
  project(id: String!): Project
  myProjects(after: String, first: Int, before: String, last: Int): ProjectConnection!
  otherProjects(after: String, first: Int, before: String, last: Int): ProjectConnection!
}
